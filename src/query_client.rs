pub mod backend_api {
    tonic::include_proto!("backend_api");
}
use backend_api::*;
use tonic_web_wasm_client::Client;

// pub struct QueryClient {
//     // pub client: backend_api_client::BackendApiClient<Client>,
// }

pub type QueryClient = backend_api_client::BackendApiClient<Client>;

impl QueryClient {
    pub fn build(api_url: &url::Url) -> backend_api_client::BackendApiClient<Client> {
        //let base_url = "http://localhost:9001"; // URL of the gRPC-web server
        let client = Client::new(api_url.to_string()); // `QueryClient` is the client generated by tonic
        backend_api_client::BackendApiClient::new(client)
    }

    /*
     * API_URL environment must be set to valid URL.
     */
    pub fn build_from_env() -> backend_api_client::BackendApiClient<Client> {
        let base_url = std::env::var("API_URL").expect("API_URL must be set");
        Self::build(&url::Url::parse(&base_url).expect("API_URL must be a valid URL"))
    }
}
