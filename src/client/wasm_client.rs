pub mod query_client {

    pub mod backend_api {
        tonic::include_proto!("backend_api");
    }
    use std::str::FromStr;

    use backend_api::backend_api_client::BackendApiClient;

    use tonic_web_wasm_client::Client;

    pub type QueryClient = BackendApiClient<Client>;

    impl QueryClient {
        pub async fn build(api_url: &url::Url) -> BackendApiClient<Client> {
            //let base_url = "http://localhost:9001"; // URL of the gRPC-web server
            let client = Client::new(api_url.to_string()); // `QueryClient` is the client generated by tonic
            BackendApiClient::new(client)
        }

        /*
         * API_URL environment must be set to valid URL.
         */
        pub async fn build_from_env() -> BackendApiClient<Client> {
            let base_url = std::env::var("API_URL").expect("API_URL must be set");
            Self::build(&url::Url::parse(&base_url).expect("API_URL must be a valid URL"))
        }
    }
}
