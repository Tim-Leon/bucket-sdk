pub mod query_client {

    use std::str::FromStr;
    use bucket_api::backend_api::backend_api_client::BackendApiClient;
    use tonic::transport::{Channel, Uri};

    use tonic_web_wasm_client::Client;
    use crate::client::QueryClientBuilder;

    pub type QueryClient = BackendApiClient<Client>;

    impl QueryClient {
        pub async fn build(api_url: Uri) -> BackendApiClient<Client> {

        }

        /*
         * API_URL environment must be set to valid URL.
         */
        pub async fn build_from_env() -> BackendApiClient<Client> {

        }
    }

    impl QueryClientBuilder for QueryClient {
        async fn build(api_url: Uri) -> BackendApiClient<Channel> {
            //let base_url = "http://localhost:9001"; // URL of the gRPC-web server
            let client = Client::new(api_url.to_string()); // `QueryClient` is the client generated by tonic
            BackendApiClient::new(client)
        }

        async fn build_from_env() -> BackendApiClient<Channel> {
            let base_url = std::env::var("API_URL").expect("API_URL must be set");
            Self::build(&base_url)
        }
    }

}
